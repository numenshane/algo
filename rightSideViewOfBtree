/*int height(struct TreeNode*root){
    if(!root)return 0;
    int L = height(root->left);
    int R = height(root->right);
    return fmax(L,R)+1;
} 
void dfs(struct TreeNode* root,int depth,int *returnSize,int*res){æ•°
    if(!root) return;
    if(*returnSize==depth) res[(*returnSize)++]=root->val;
    dfs(root->right,depth+1,returnSize,res);
    dfs(root->left,depth+1,returnSize,res);
}
int* rightSideView(struct TreeNode* root, int* returnSize){
    int H = height(root);
    int*res = (int*)malloc(sizeof(int)*H);
    *returnSize = 0;
    dfs(root,0,returnSize,res);
    return res;        
}*/

int*rightSideView(struct TreeNode* root,int*returnSize) {
    *returnSize=0;
    if(!root) return NULL;
    int*res=(int*)malloc(sizeof(int*)*100);
    struct TreeNode** q=(struct TreeNode**)malloc(sizeof(struct TreeNode*)*1000);
    int front=0,back=-1;
    q[++back]=root; 
	// dynamic arr not override, append at back, pop at front
    while(front!=back+1){
        res[(*returnSize)++]=q[back]->val;
        int size=back-front+1;
        for(int i=0;i<size;++i){
            struct TreeNode*t=q[front++];
            if(t->left) q[++back]=t->left;
            if(t->right) q[++back]=t->right;
        }           
    }
	  free(q);
    return res;
}
